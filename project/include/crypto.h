#include <iostream>
#include <string>
#include <array>
#include <string.h>
#include <openssl/evp.h>
#include <openssl/pem.h>
#include <openssl/rand.h>
#include <openssl/x509.h>
#include <openssl/bio.h>
#include <openssl/err.h>
#include "constants.h"

using namespace std;

class CryptoOperation {

    public:
    void generateNonce(unsigned char* nonce);

    //CERTIFICATES
    void loadCRL(X509_CRL*& crl);
    void loadCertificate(X509*& cert, string path);
    unsigned int serializeCertificate(X509* cert, unsigned char* cert_buf);
    void deserializeCertificate(int cert_len, unsigned char* cert_buff, X509*& buff);
    bool verifyCertificate(X509* cert_to_verify);

    //KEYS
    void readPrivateKey(string usr, string pwd, EVP_PKEY *&prvKey);
    void readPrivateKey(EVP_PKEY *&prvKey);
    void readPublicKey(string user, EVP_PKEY *&pubKey);

    // Public Key handling
    unsigned int serializePublicKey(EVP_PKEY *pub_key, unsigned char *pubkey_buf);
    void deserializePublicKey(unsigned char *pubkey_buf, unsigned int pubkey_size, EVP_PKEY *&pubkey);
    void getPublicKeyFromCertificate(X509 *cert, EVP_PKEY *&pubkey);

    // DH
    static DH *get_dh2048(void)
    {
        static unsigned char dhp_2048[] = {
            0x86, 0x47, 0x19, 0x1B, 0xBE, 0xC9, 0xF5, 0x06, 0x09, 0x6E,
            0x91, 0xAB, 0x6F, 0x09, 0x38, 0xBF, 0x29, 0x10, 0xAC, 0xB0,
            0xE6, 0x9C, 0xD4, 0xE3, 0x48, 0x56, 0x03, 0x8A, 0xAD, 0x32,
            0x64, 0x1F, 0x36, 0x25, 0xDE, 0xBE, 0xB7, 0x10, 0x99, 0xB5,
            0x03, 0x0D, 0xD5, 0xC2, 0xD7, 0xEE, 0x90, 0x72, 0x3C, 0x9F,
            0x1E, 0x94, 0x09, 0x92, 0x2E, 0x78, 0xD9, 0x78, 0xDA, 0xE8,
            0x64, 0x49, 0xA4, 0xA9, 0x27, 0xD3, 0xD9, 0x20, 0x78, 0xA9,
            0xAA, 0x33, 0x79, 0x80, 0xEA, 0x11, 0xC7, 0x11, 0x61, 0x64,
            0xEC, 0x1E, 0xAE, 0x30, 0xB8, 0x9C, 0x31, 0xC6, 0x51, 0xE6,
            0x7F, 0x75, 0x98, 0x36, 0x76, 0xD7, 0x79, 0x66, 0x87, 0x08,
            0xC0, 0x39, 0x7F, 0x48, 0xCB, 0x64, 0xD2, 0xB9, 0xF1, 0x6B,
            0xFA, 0xF4, 0x5F, 0x11, 0x49, 0x21, 0x19, 0xB8, 0xC0, 0x92,
            0x53, 0x02, 0x34, 0xF0, 0xDD, 0xA2, 0xFB, 0xB4, 0x08, 0xFF,
            0xA4, 0xFD, 0x54, 0x26, 0xAE, 0x6E, 0x37, 0x0B, 0x9A, 0x1E,
            0xA6, 0x2A, 0x56, 0xD4, 0xCA, 0x90, 0xF3, 0xCC, 0x3B, 0x50,
            0x4D, 0x1A, 0x6C, 0x9A, 0x00, 0x8D, 0x69, 0x93, 0x4D, 0xA2,
            0xAF, 0x32, 0x91, 0xCD, 0xA7, 0xCA, 0xF5, 0x86, 0xBD, 0xB3,
            0xF7, 0x68, 0x08, 0xDE, 0x8A, 0xD2, 0xA2, 0xC0, 0x47, 0xD2,
            0x77, 0x04, 0x51, 0x96, 0xFB, 0x13, 0x63, 0x01, 0x77, 0xED,
            0x54, 0xC3, 0x71, 0xF3, 0x00, 0xAE, 0x57, 0x71, 0x50, 0x38,
            0x76, 0x22, 0xE1, 0xEE, 0x68, 0xE2, 0x3F, 0x96, 0x37, 0x28,
            0x2F, 0xD8, 0x8A, 0x66, 0x87, 0xA8, 0x36, 0x59, 0x84, 0x12,
            0xBD, 0xDC, 0x4D, 0xA8, 0x39, 0x91, 0xED, 0x70, 0x1A, 0x5E,
            0x33, 0x43, 0x7C, 0x05, 0x1D, 0xD3, 0xFC, 0xC1, 0x84, 0x2D,
            0xAC, 0xCF, 0x45, 0x2A, 0x82, 0x1B, 0x56, 0x54, 0xF2, 0x67,
            0xCE, 0x11, 0xC4, 0x68, 0x1B, 0x8B
        };
        static unsigned char dhg_2048[] = {
            0x02
        };
        DH *dh = DH_new();
        BIGNUM *p, *g;

        if (dh == NULL)
            return NULL;
        p = BN_bin2bn(dhp_2048, sizeof(dhp_2048), NULL);
        g = BN_bin2bn(dhg_2048, sizeof(dhg_2048), NULL);
        if (p == NULL || g == NULL
                || !DH_set0_pqg(dh, p, NULL, g)) {
            DH_free(dh);
            BN_free(p);
            BN_free(g);
            return NULL;
        }
        return dh;
    }

    void buildParameters(EVP_PKEY *&dh_params);
    void keyGeneration(EVP_PKEY *&my_prvkey);
    unsigned int sign(unsigned char *message, unsigned int messageLen, unsigned char *buffer, EVP_PKEY *prvKey);
};
